From: Michal Hocko <mhocko@suse.com>
Date: Wed, 14 Jun 2017 08:17:02 +0200
Subject: mm: allow to configure stack gap size
Bug-Debian-Security: https://security-tracker.debian.org/tracker/CVE-2017-1000364

Add a kernel command line option (stack_guard_gap) to specify the stack
gap size (in page unites) and export the value in /proc/<pid>/smaps for
stack vmas. This might be used for special applications like CRIU/RR.

Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Michal Hocko <mhocko@suse.com>
[carnil: backport to 4.9, adjust location for documentation]
---
 Documentation/kernel-parameters.txt |  7 +++++++
 fs/proc/task_mmu.c                  |  3 +++
 mm/mmap.c                           | 13 +++++++++++++
 3 files changed, 23 insertions(+)

--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -3932,6 +3932,13 @@ bytes respectively. Such letter suffixes
 	spia_pedr=
 	spia_peddr=
 
+	stack_guard_gap=	[MM]
+			override the default stack gap protection. The value
+			is in page units and it defines how many pages prior
+			to (for stacks growing down) resp. after (for stacks
+			growing up) the main stack are reserved for no other
+			mapping. Default value is 256 pages.
+
 	stacktrace	[FTRACE]
 			Enabled the stack tracer on boot up.
 
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -805,6 +805,9 @@ static int show_smap(struct seq_file *m,
 		   (vma->vm_flags & VM_LOCKED) ?
 			(unsigned long)(mss.pss >> (10 + PSS_SHIFT)) : 0);
 
+	if (is_stack(m->private, vma))
+		seq_printf(m, "Stack_Gap:      %8lu kB\n", stack_guard_gap >>10);
+
 	arch_show_smap(m, vma);
 	show_smap_vma_flags(m, vma);
 	m_cache_vma(m, vma);
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -2337,6 +2337,19 @@ int expand_downwards(struct vm_area_stru
 /* enforced gap between the expanding stack and other mappings. */
 unsigned long stack_guard_gap = 256UL<<PAGE_SHIFT;
 
+static int __init cmdline_parse_stack_guard_gap(char *p)
+{
+	unsigned long val;
+	char *endptr;
+
+	val = simple_strtoul(p, &endptr, 10);
+	if (!*endptr)
+		stack_guard_gap = val << PAGE_SHIFT;
+
+	return 0;
+}
+__setup("stack_guard_gap=", cmdline_parse_stack_guard_gap);
+
 /*
  * Note how expand_stack() refuses to expand the stack all the way to
  * abut the next virtual mapping, *unless* that mapping itself is also

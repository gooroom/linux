From: Ben Hutchings <ben@decadent.org.uk>
Date: Wed, 02 Mar 2016 16:30:16 +0000
Subject: Revert "cgroup: make sure a parent css isn't offlined before its children"
Forwarded: not-needed

This reverts commit d9892cc2d91b31ea58c775531813a21dc24e50d0, which
was commit aa226ff4a1ce79f229c6b7a4c0a14e17fececd01 upstream.  It
seems to be a good fix but causes an unfixable ABI change as it
extends a structure that's embedded in other structures.

---
--- a/include/linux/cgroup.h
+++ b/include/linux/cgroup.h
@@ -88,12 +88,6 @@ struct cgroup_subsys_state {
 	 */
 	u64 serial_nr;
 
-	/*
-	 * Incremented by online self and children.  Used to guarantee that
-	 * parents are not offlined before their children.
-	 */
-	atomic_t online_cnt;
-
 	/* percpu_ref killing and RCU release */
 	struct rcu_head rcu_head;
 	struct work_struct destroy_work;
--- a/kernel/cgroup.c
+++ b/kernel/cgroup.c
@@ -4278,7 +4278,6 @@ static void init_and_link_css(struct cgr
 	INIT_LIST_HEAD(&css->sibling);
 	INIT_LIST_HEAD(&css->children);
 	css->serial_nr = css_serial_nr_next++;
-	atomic_set(&css->online_cnt, 0);
 
 	if (cgroup_parent(cgrp)) {
 		css->parent = cgroup_css(cgroup_parent(cgrp), ss);
@@ -4301,10 +4300,6 @@ static int online_css(struct cgroup_subs
 	if (!ret) {
 		css->flags |= CSS_ONLINE;
 		rcu_assign_pointer(css->cgroup->subsys[ss->id], css);
-
-		atomic_inc(&css->online_cnt);
-		if (css->parent)
-			atomic_inc(&css->parent->online_cnt);
 	}
 	return ret;
 }
@@ -4529,15 +4524,10 @@ static void css_killed_work_fn(struct wo
 		container_of(work, struct cgroup_subsys_state, destroy_work);
 
 	mutex_lock(&cgroup_mutex);
-
-	do {
-		offline_css(css);
-		css_put(css);
-		/* @css can't go away while we're holding cgroup_mutex */
-		css = css->parent;
-	} while (css && atomic_dec_and_test(&css->online_cnt));
-
+	offline_css(css);
 	mutex_unlock(&cgroup_mutex);
+
+	css_put(css);
 }
 
 /* css kill confirmation processing requires process context, bounce */
@@ -4546,10 +4536,8 @@ static void css_killed_ref_fn(struct per
 	struct cgroup_subsys_state *css =
 		container_of(ref, struct cgroup_subsys_state, refcnt);
 
-	if (atomic_dec_and_test(&css->online_cnt)) {
-		INIT_WORK(&css->destroy_work, css_killed_work_fn);
-		queue_work(cgroup_destroy_wq, &css->destroy_work);
-	}
+	INIT_WORK(&css->destroy_work, css_killed_work_fn);
+	queue_work(cgroup_destroy_wq, &css->destroy_work);
 }
 
 /**
